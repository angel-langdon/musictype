import logging
from pathlib import Path
from typing import Union

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

from backend.api.routes import base_router
from backend.settings import APP_ENV


def serve_next_app(app: FastAPI, build_dir: Union[Path, str]) -> FastAPI:
    """Serves a Next application in the root directory `/`

    Args:
        app: FastAPI application instance
        build_dir: Next build directory (generated by `yarn build` or
            `npm run build`)

    Returns:
        FastAPI: instance with the react application added
    """
    if isinstance(build_dir, str):
        build_dir = Path(build_dir)

    app.mount(
        "/_next/",
        StaticFiles(directory=build_dir / "_next"),
        name="Next static files",
    )
    templates = Jinja2Templates(directory=build_dir.as_posix())

    @app.get("/favicon.ico")
    def favicon():
        return FileResponse(build_dir / "favicon.ico")

    @app.get("/{full_path:path}")
    def serve_app(request: Request, full_path: str):
        """Serve the react app
        `full_path` variable is necessary to serve each possible endpoint with
        `index.html` file in order to be compatible with `react-router-dom
        """

        def response(path: str):
            return templates.TemplateResponse(path, {"request": request})

        if full_path == "":
            return response("index.html")
        if full_path.startswith("song/"):
            return response("song/[songId].html")
        return response("404.html")

    return app


class HealthCheckFilter(logging.Filter):  # pragma: no cover
    def filter(self, record: logging.LogRecord) -> bool:
        return record.getMessage().find("/api/healthcheck") == -1


def create_api():
    api = FastAPI(
        title="Cognitive API",
        description="<h3>Back-end support for Cognitive application</h3>",
    )

    api.include_router(base_router.router)
    return api


def create_app() -> FastAPI:
    app = FastAPI()
    app.mount("/api", create_api())

    if APP_ENV == "dev":
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["http://localhost:3000"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
    if APP_ENV == "prod":  # pragma: no cover
        logging.getLogger("uvicorn.access").addFilter(HealthCheckFilter())

    app = serve_next_app(
        app, Path(__file__).parent.parent / "frontend" / "out"
    )

    return app


app = create_app()

if __name__ == "__main__":
    assert APP_ENV == "dev"

    import os
    from pathlib import Path

    os.chdir(Path(__file__).parent)
    os.system("poetry run uvicorn main:app --reload")
